@頂点追加
--track0:X1,-10000,10000,0,0.01
--track1:Y1,-10000,10000,0,0.01
--track2:X2,-10000,10000,0,0.01
--track3:Y2,-10000,10000,0,0.01

local n = #KaroterraDynamicPolygon
KaroterraDynamicPolygon[n+1] = obj.track0
KaroterraDynamicPolygon[n+2] = obj.track1
KaroterraDynamicPolygon[n+3] = obj.track2
KaroterraDynamicPolygon[n+4] = obj.track3


@描画
--track0:ライン幅,1,4000,10,1
--track1:頂点数,2,100,20,1
--track2:ラインA,0,100,100
--track3:フィルA,0,100,100
--dialog:ライン色/col,color=0xffffff;フィル色/col,color2=0x000000;角(0 - 3),p0=3;シャープ限界(>0),p1=5;端(0 - 2),p2=0;フィルモード(0 - 2),p7=2;ラインAA/chk,p3=1;フィルAA(0 - 2),p8=1;頂点表示/chk,p4=0;頂点色/col,color3=0xff0000;頂点サイズ,p5=10;頂点A(0 - 100),p6=100;中心(0 - 2),p9=0;座標系(0 - 4),p10=0;ラインパターン,p11={};オフセット(≧0),p12=0
--check0:閉じる,1
--[[
  A はアルファ(不透明度)、AAはアンチエイリアス
  角
    0: 角処理なし
    1: 丸
    2: ベベル
    3: シャープ
  シャープ限界
    角がシャープの時、ライン幅に対してどれだけ角を尖らせるか
  端
    0: フラット
    1: 丸
    2: 四角
  フィルモード
    0: 無効
    1: Crossing Number algorithm
    2: Winding Number algorithm
  フィルAA
    0: 無効
    1: アンチエイリアスその1
    2: アンチエイリアスその2
  中心
    0: オブジェクト座標が中心
    1: 多角形を含む最小の矩形の中心が中心
    2: 多角形の重心が中心
  座標系
    0: 直交座標(絶対)
    1: 直交座標(相対)
    2: 曲座標(絶対)
    3: 極座標(相対,偏角リセット)
    4: 極座標(相対,偏角持越し)
  ラインパターン
    ラインを破線や一点鎖線などにするときに、線の長さ、空白の長さを配列で入力する
  オフセット
    ラインパターンのオフセット
]]

local lw = obj.track0 / 2
local num = math.floor(obj.track1) * 2
local cornerType = p0
local sharpLimit = p1
local edge = p2
local antialias = p3
local close = obj.check0
local strokeAlpha = obj.track2 / 100
local fillAlpha = obj.track3 / 100
local vertexAlpha = p6 / 100
local showVertex = p4 == 1 and vertexAlpha > 0
local vertexSize = p5
local fillMode = p7
local fillAntialias = p8
local centerMode = p9
local coordType = p10
local strokePattern = p11
local patternOffset = p12 * 2 * lw
local kdp = KaroterraDynamicPolygon
local libKDP = require("KaroterraDynamicPolygon")

if #kdp < num then
  num = #kdp
end
if num == 4 then
  close = false
end

-- 関数定義
function rotate(x, y, theta)
  local cos = math.cos(theta)
  local sin = math.sin(theta)
  return x*cos-y*sin, x*sin+y*cos
end

function calcLineCoef(x1, y1, x2, y2)
  local a = (y2 - y1) / (x2 - x1 + 1e-7)
  local b = y1 - a * x1
  return a, b
end

function calcIntersection(a1, b1, a2, b2)
  local x = (b2 - b1) / (a1 - a2 + 1e-7)
  local y = a1 * x + b1
  return x, y
end

function radDiff(x, y)
  local z = x - y
  if z > math.pi then
    z = z - 2 * math.pi
  elseif z < -math.pi then
    z = z + 2 * math.pi
  end
  return z
end

function makeLine(x1, y1, x2, y2)
  local theta = math.atan2(y2-y1, x2-x1)
  local dx, dy = rotate(0, lw, theta)
  local line = {
    x1, y1, x2, y2, theta,
    x1+dx,y1+dy, x1-dx,y1-dy, x2-dx,y2-dy, x2+dx,y2+dy
  }
  return line
end

function drawline(l)
  obj.drawpoly(l[6],l[7],0, l[8],l[9],0, l[10],l[11],0, l[12],l[13],0)
end

function drawFan(cx, cy, r, ang, rot, color)
  obj.load("figure", "円", color, r * 2)
  local sr, cr = r * math.sin(rot), r * math.cos(rot)
  if ang < math.pi / 4 then
    local u0, v0 = r, r
    local u1, v1 = r, 0
    local t = r * math.tan(ang)
    local u2, v2 = r + t, 0
    local u3, v3 = r, r
    local x0, y0 = cx, cy
    local x1, y1 = cx + sr, cy - cr
    local x2, y2 = x1 + t * math.cos(rot), y1 + t * math.sin(rot)
    local x3, y3 = cx, cy
    obj.drawpoly(x0,y0,0, x1,y1,0, x2,y2,0, x3,y3,0, u0,v0, u1,v1, u2,v2, u3,v3)
  elseif ang < math.pi * (3 / 4) then
    local u0, v0 = r, r
    local u1, v1 = r, 0
    local u2, v2 = r*2, 0
    local t = r * (1 + math.tan(ang - math.pi / 2))
    local u3, v3 = r*2, t
    local x0, y0 = cx, cy
    local x1, y1 = cx + sr, cy - cr
    local x2, y2 = x1 + cr, y1 + sr
    local x3, y3 = x2 - t * math.sin(rot), y2 + t * math.cos(rot)
    obj.drawpoly(x0,y0,0, x1,y1,0, x2,y2,0, x3,y3,0, u0,v0, u1,v1, u2,v2, u3,v3)
  elseif ang < math.pi * (5 / 4) then
    local u0, v0 = r, r
    local u1, v1 = r, 0
    local u2, v2 = r*2, 0
    local u3, v3 = r*2, r
    local x0, y0 = cx, cy
    local x1, y1 = cx + sr, cy - cr
    local x2, y2 = x1 + cr, y1 + sr
    local x3, y3 = cx + cr, cy + sr
    obj.drawpoly(x0,y0,0, x1,y1,0, x2,y2,0, x3,y3,0, u0,v0, u1,v1, u2,v2, u3,v3)
    u1, v1 = u3, v3
    u2, v2 = r*2, r*2
    local t = r * math.tan(math.pi - ang)
    u3, v3 = r + t, r*2
    x1, y1 = x3, y3
    x2, y2 = x1 - sr, y1 + cr
    x3, y3 = x2 + (t - r) * math.cos(rot), y2 + (t - r) * math.sin(rot)
    obj.drawpoly(x0,y0,0, x1,y1,0, x2,y2,0, x3,y3,0, u0,v0, u1,v1, u2,v2, u3,v3)
  elseif ang < math.pi * (7 / 4) then
    local u0, v0 = r, 0
    local u1, v1 = r*2, 0
    local u2, v2 = r*2, r*2
    local u3, v3 = r, r*2
    local x0, y0 = cx + sr, cy - cr
    local x1, y1 = x0 + cr, y0 + sr
    local x2, y2 = x1 - 2*sr, y1 + 2*cr
    local x3, y3 = cx - sr, cy + cr
    obj.drawpoly(x0,y0,0, x1,y1,0, x2,y2,0, x3,y3,0, u0,v0, u1,v1, u2,v2, u3,v3)
    u0, v0 = r, r
    u1, v1 = u3, v3
    u2, v2 = 0, 2*r
    local t = r * math.tan(math.pi * 3 / 2 - ang)
    u3, v3 = 0, r + t
    x0, y0 = cx, cy
    x1, y1 = cx - sr, cy + cr
    x2, y2 = x1 - cr, y1 - sr
    x3, y3 = x2 + (r - t) * math.sin(rot), y2 - (r - t) * math.cos(rot)
    obj.drawpoly(x0,y0,0, x1,y1,0, x2,y2,0, x3,y3,0, u0,v0, u1,v1, u2,v2, u3,v3)
  else
    local u0, v0 = r, 0
    local u1, v1 = r*2, 0
    local u2, v2 = r*2, r*2
    local u3, v3 = r, r*2
    local x0, y0 = cx + sr, cy - cr
    local x1, y1 = x0 + cr, y0 + sr
    local x2, y2 = x1 - 2*sr, y1 + 2*cr
    local x3, y3 = cx - sr, cy + cr
    obj.drawpoly(x0,y0,0, x1,y1,0, x2,y2,0, x3,y3,0, u0,v0, u1,v1, u2,v2, u3,v3)
    u0, v0 = r, r
    u1, v1 = u3, v3
    u2, v2 = 0, 2*r
    u3, v3 = 0, r
    x0, y0 = cx, cy
    x1, y1 = cx - sr, cy + cr
    x2, y2 = x1 - cr, y1 - sr
    x3, y3 = x2 + sr, y2 - cr
    obj.drawpoly(x0,y0,0, x1,y1,0, x2,y2,0, x3,y3,0, u0,v0, u1,v1, u2,v2, u3,v3)
    u1, v1 = u3, v3
    u2, v2 = 0, 0
    local t = r * (1 - math.tan(math.pi * 2 - ang))
    u3, v3 = t, 0
    x1, y1 = x3, y3
    x2, y2 = x1 + sr, y1 - cr
    x3, y3 = x2 + t * math.cos(rot), y2 + t * math.sin(rot)
    obj.drawpoly(x0,y0,0, x1,y1,0, x2,y2,0, x3,y3,0, u0,v0, u1,v1, u2,v2, u3,v3)
  end
end

function drawCorner(l1, l2)
  if cornerType == 1 then
    local ang = radDiff(l2[5], l1[5])
    if ang > 0 then
      drawFan(l1[3], l1[4], lw+1, ang, l1[5], color)
    else
      drawFan(l1[3], l1[4], lw+1, -ang, l2[5]+math.pi, color)
    end
  elseif cornerType == 2 then
    obj.load("figure", "四角形", color, 1)
    if radDiff(l2[5], l1[5]) > 0 then
      obj.drawpoly(l1[3],l1[4],0, l1[10],l1[11],0, l2[8],l2[9],0, l1[3],l1[4],0)
    else
      obj.drawpoly(l1[3],l1[4],0, l2[6],l2[7],0, l1[12],l1[13],0, l1[3],l1[4],0)
    end
  elseif cornerType == 3 then
    obj.load("figure", "四角形", color, 1)
    if radDiff(l2[5], l1[5]) > 0 then
      local a1, b1 = calcLineCoef(l1[8], l1[9], l1[10], l1[11])
      local a2, b2 = calcLineCoef(l2[8], l2[9], l2[10], l2[11])
      local x3, y3 = calcIntersection(a1, b1, a2, b2)
      local len = math.sqrt((l1[3]-x3)^2 + (l1[4]-y3)^2)
      if len / lw <= sharpLimit then
        obj.drawpoly(l1[3],l1[4],0, l1[10],l1[11],0, x3,y3,0, l2[8],l2[9],0)
      else
        obj.drawpoly(l1[10],l1[11],0, l2[8],l2[9],0, l1[12],l1[13],0, l2[6],l2[7],0)
      end
    else
      local a1, b1 = calcLineCoef(l1[6], l1[7], l1[12], l1[13])
      local a2, b2 = calcLineCoef(l2[6], l2[7], l2[12], l2[13])
      local x3, y3 = calcIntersection(a1, b1, a2, b2)
      local len = math.sqrt((l1[3]-x3)^2 + (l1[4]-y3)^2)
      if len / lw <= sharpLimit then
        obj.drawpoly(l1[3],l1[4],0, l2[6],l2[7],0, x3,y3,0, l1[12],l1[13],0)
      else
        obj.drawpoly(l1[10],l1[11],0, l2[6],l2[7],0, l1[12],l1[13],0, l2[8],l2[9],0)
      end
    end
  end
end

-- 座標系の変換と中心の計算
local r, theta = 0, 0
if 2 <= coordType and coordType <= 4 then
  r, theta = kdp[1], math.rad(kdp[2])
  kdp[1], kdp[2] = r * math.cos(theta), r * math.sin(theta)
end

local minX, maxX, minY, maxY = kdp[1], kdp[1], kdp[2], kdp[2]
local accX, accY = kdp[1], kdp[2]
for i = 3, num-1, 2 do
  if coordType == 1 then  -- 直交座標(相対)
    kdp[i] = kdp[i] + kdp[i-2]
    kdp[i+1] = kdp[i+1] + kdp[i-1]
  elseif coordType == 2 then  -- 極座標
    r, theta = kdp[i], math.rad(kdp[i+1])
    kdp[i], kdp[i+1] = r * math.cos(theta), r * math.sin(theta)
  elseif coordType == 3 then  -- 極座標(相対,偏角リセット)
    r, theta = kdp[i], math.rad(kdp[i+1])
    kdp[i], kdp[i+1] = r*math.cos(theta) + kdp[i-2], r*math.sin(theta) + kdp[i-1]
  elseif coordType == 4 then  -- 極座標(相対,偏角持越し)
    r, theta = kdp[i], theta + math.rad(kdp[i+1])
    kdp[i], kdp[i+1] = r*math.cos(theta) + kdp[i-2], r*math.sin(theta) + kdp[i-1]
  end

  if kdp[i] < minX then
    minX = kdp[i]
  elseif kdp[i] > maxX then
    maxX = kdp[i]
  end
  if kdp[i+1] < minY then
    minY = kdp[i+1]
  elseif kdp[i+1] > maxY then
    maxY = kdp[i+1]
  end
  accX = accX + kdp[i]
  accY = accY + kdp[i+1]
end

local cx, cy = (minX + maxX) / 2, (minY + maxY) / 2
local gx, gy = accX / (num / 2), accY / (num / 2)
for i = 1, num-1, 2 do
  kdp[i] = kdp[i] - cx
  kdp[i+1] = kdp[i+1] - cy
end

-- 描画する直線の整理
local lines = {}
for i = 1, num-3, 2 do
  lines[#lines+1] = makeLine(kdp[i], kdp[i+1], kdp[i+2], kdp[i+3])
end
if close then
  lines[#lines+1] = makeLine(kdp[num-1], kdp[num], kdp[1], kdp[2])
end

-- フレームバッファサイズの決定
local w = math.max(maxX - cx, cx - minX) * 2
local h = math.max(maxY - cy, cy - minY) * 2
local margin = lw * 2
if cornerType == 3 then
  margin = math.max(margin, lw * sharpLimit * 2)
end
if showVertex then
  margin = math.max(margin, vertexSize)
end
w, h = w + margin, h + margin

-- 描画
obj.setoption("antialias", antialias)
obj.setoption("drawtarget", "tempbuffer", w, h)

-- 直線
obj.setoption("blend", "alpha_add")
obj.load("figure", "四角形", color, 1)
local i = 1
while i <= #strokePattern do
  if strokePattern[i] <= 0 then
    table.remove(strokePattern, i)
  else
    i = i + 1
  end
end
local corners = {}
if #strokePattern == 0 then
  for i = 1, #lines do
    drawline(lines[i])
    corners[#corners+1] = true
  end
else
  local patternIndex = 0
  local blank = false
  local nextLen = 2 * lw * strokePattern[1]
  local patternLen = nextLen
  local patternProgress = 0

  while true do
    if nextLen > patternOffset then
      nextLen = nextLen - patternOffset
      patternProgress = patternOffset
    break
    end
    patternOffset = patternOffset - nextLen
    patternIndex = (patternIndex + 1) % #strokePattern
    nextLen = 2 * lw * strokePattern[patternIndex + 1]
    patternLen = nextLen
    blank = not blank
  end

  for i = 1, #lines do
    local nx, ny = lines[i][3] - lines[i][1], lines[i][4] - lines[i][2]
    local len = math.sqrt(nx*nx + ny*ny)
    nx, ny = nx / len, ny / len
    local progress = 0
    local xs1, ys1, xs2, ys2 = lines[i][6], lines[i][7], lines[i][8], lines[i][9]

    while progress < len do
      local currentLen = nextLen
      local step = 0
      if currentLen <= len - progress then
        step = currentLen
        patternIndex = (patternIndex + 1) % #strokePattern
        nextLen = 2 * lw * strokePattern[patternIndex + 1]
      else
        step = len - progress
        nextLen = currentLen - step
      end
      progress = progress + step
      local dx, dy = nx * step, ny * step
      local xe1, ye1, xe2, ye2 = xs1 + dx, ys1 + dy, xs2 + dx, ys2 + dy
      if not blank then
        obj.drawpoly(xs1,ys1,0, xs2,ys2,0, xe2,ye2,0, xe1,ye1,0)
      end
      xs1, ys1, xs2, ys2 = xe1, ye1, xe2, ye2
      patternProgress = patternProgress + step
      if patternProgress >= patternLen then
        patternProgress = 0
        patternLen = nextLen
        blank = not blank
      end
    end
    corners[#corners+1] = not blank
  end
end
-- 角
for i = 1, #lines-1 do
  if corners[i] then
    drawCorner(lines[i], lines[i+1])
  end
end
if close then
  if corners[#corners] then
    drawCorner(lines[#lines], lines[1])
  end
end
-- 端
if not close and edge == 1 then
  obj.load("figure", "円", color, lw*2+2)
  obj.draw(lines[1][1], lines[1][2])
  obj.draw(lines[#lines][3], lines[#lines][4])
elseif not close and edge == 2 then
  obj.load("figure", "四角形", color, 1)
  local l = lines[1]
  local dx1, dy1 = rotate(-lw, lw, l[5])
  local dx2, dy2 = rotate(-lw, -lw, l[5])
  obj.drawpoly(l[1]+dx1,l[2]+dy1,0, l[1]+dx2,l[2]+dy2,0, l[8],l[9],0, l[6],l[7],0)
  l = lines[#lines]
  dx1, dy1 = rotate(lw, -lw, l[5])
  dx2, dy2 = rotate(lw, lw, l[5])
  obj.drawpoly(l[3]+dx1,l[4]+dy1,0, l[3]+dx2,l[4]+dy2,0, l[12],l[13],0, l[10],l[11],0)
end

obj.copybuffer("cache:stroke", "tmp")

obj.setoption("blend", 0)
obj.setoption("drawtarget", "tempbuffer", w, h)
obj.load("tempbuffer")
local data, buf_w, buf_h = obj.getpixeldata()
libKDP.fillPoly(data, buf_w, buf_h, kdp, num, color2, fillMode, fillAntialias)
obj.putpixeldata(data)
obj.draw(0, 0, 0, 1, fillAlpha)
obj.copybuffer("obj", "cache:stroke")
obj.draw(0, 0, 0, 1, strokeAlpha)

-- 頂点
if showVertex then
  obj.load("figure", "円", color3, vertexSize)
  for i = 1, num, 2 do
    obj.draw(kdp[i], kdp[i+1], 0, 1, vertexAlpha)
  end
end

obj.setoption("drawtarget", "framebuffer")
obj.load("tempbuffer")
if centerMode == 1 then
  obj.ox = cx
  obj.oy = cy
elseif centerMode == 2 then
  obj.ox = gx
  obj.oy = gy
  obj.cx = obj.cx + gx - cx
  obj.cy = obj.cy + gy - cy
else
  obj.cx = obj.cx - cx
  obj.cy = obj.cy - cy
end
